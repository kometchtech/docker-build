name: Build and Push Multi-Arch Docker Images

on:
  push:
    paths:
      - '**/Dockerfile'
      - '**/VERSION'
      - '**/entrypoint.sh'
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.find-dirs.outputs.directories }}
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全コミットを取得

      - name: Determine previous commit
        id: previous-commit
        run: |
          if [ -z "${{ github.event.before }}" ] || ! git rev-parse ${{ github.event.before }} >/dev/null 2>&1; then
            BEFORE_COMMIT=$(git rev-parse HEAD^ || echo "")
          else
            BEFORE_COMMIT=${{ github.event.before }}
          fi
          echo "before_commit=$BEFORE_COMMIT" >> $GITHUB_ENV

      - name: Find modified directories
        id: find-dirs
        run: |
          if [ -n "${{ env.before_commit }}" ]; then
            CHANGED_DIRS=$(git diff --name-only ${{ env.before_commit }} HEAD | grep -E 'Dockerfile|VERSION|entrypoint.sh' | xargs -I {} dirname {} | sort -u | uniq)
            if [ -n "$CHANGED_DIRS" ]; then
              # 配列を作成
              DIRS_JSON="["
              for dir in $CHANGED_DIRS; do
                if [ "$DIRS_JSON" != "[" ]; then
                  DIRS_JSON="$DIRS_JSON,"
                fi
                DIRS_JSON="$DIRS_JSON\"$dir\""
              done
              DIRS_JSON="$DIRS_JSON]"
              echo "directories=$DIRS_JSON" >> $GITHUB_OUTPUT
              echo "Changed directories: $CHANGED_DIRS"
            else
              echo "No relevant changes found"
              echo "directories=[]" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous commit found, skipping build."
            echo "directories=[]" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: needs.prepare.outputs.directories != '[]'
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        directory: ${{ fromJson(needs.prepare.outputs.directories) }}
    runs-on: ${{ matrix.platform == 'linux/amd64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: source

      - name: Get image name from directory
        id: image-name
        run: |
          IMAGE_NAME=$(basename ${{ matrix.directory }})
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set VERSION environment variable
        id: set-version
        run: |
          if [ -f "source/${{ matrix.directory }}/VERSION" ]; then
            RELEASE_VERSION=$(cat "source/${{ matrix.directory }}/VERSION" | tr -d ' \n\t\r')
            echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "Version set to: ${RELEASE_VERSION}"
          else
            echo "No VERSION file found, using latest"
            echo "release_version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Get architecture suffix
        id: arch-suffix
        run: |
          if [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            echo "suffix=amd64" >> $GITHUB_OUTPUT
          else
            echo "suffix=arm64" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: source/${{ matrix.directory }}
          platforms: ${{ matrix.platform }}
          push: true
          no-cache: ${{ inputs.no-cache == true }}
          build-args: |
            VERSION=${{ steps.set-version.outputs.release_version }}
          cache-from: type=gha,scope=platform-${{ steps.arch-suffix.outputs.suffix }}
          cache-to: type=gha,mode=max,scope=platform-${{ steps.arch-suffix.outputs.suffix }}
          outputs: type=image,name=ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "${{ matrix.platform }},${{ steps.build.outputs.digest }}" >> /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}
          cat /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.image-name.outputs.image_name }}-${{ steps.arch-suffix.outputs.suffix }}
          path: /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}
          retention-days: 1

  merge:
    needs: [prepare, build]
    if: needs.prepare.outputs.directories != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.prepare.outputs.directories) }}
    outputs:
      release_version: ${{ steps.set-version.outputs.release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: source

      - name: Get image name from directory
        id: image-name
        run: |
          IMAGE_NAME=$(basename ${{ matrix.directory }})
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ steps.image-name.outputs.image_name }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set VERSION environment variable
        id: set-version
        run: |
          if [ -f "source/${{ matrix.directory }}/VERSION" ]; then
            RELEASE_VERSION=$(cat "source/${{ matrix.directory }}/VERSION" | tr -d ' \n\t\r')
            echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "Version set to: ${RELEASE_VERSION}"
          else
            echo "No VERSION file found, using latest"
            echo "release_version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # Check if both digest files exist
          if [ ! -f "digest-amd64" ]; then
            echo "Error: AMD64 digest file not found"
            exit 1
          fi
          
          if [ ! -f "digest-arm64" ]; then
            echo "Error: ARM64 digest file not found"
            exit 1
          fi
          
          AMD64_DIGEST=$(cat digest-amd64 | cut -d ',' -f2)
          ARM64_DIGEST=$(cat digest-arm64 | cut -d ',' -f2)
          
          echo "AMD64 digest: ${AMD64_DIGEST}"
          echo "ARM64 digest: ${ARM64_DIGEST}"
          
          # Create manifest with version tag
          echo "Creating manifest with version tag: ${{ steps.set-version.outputs.release_version }}"
          docker buildx imagetools create \
            -t ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}:${{ steps.set-version.outputs.release_version }} \
            ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}@${AMD64_DIGEST} \
            ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}@${ARM64_DIGEST}
          
          # Also tag as latest
          echo "Creating manifest with latest tag"
          docker buildx imagetools create \
            -t ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}:latest \
            ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}@${AMD64_DIGEST} \
            ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}@${ARM64_DIGEST}
          
          echo "Created and pushed manifest list for ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}"

  sync-images:
    needs: [prepare, merge]
    if: needs.prepare.outputs.directories != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.prepare.outputs.directories) }}
    steps:
      - name: Get image name from directory
        id: image-name
        run: |
          IMAGE_NAME=$(basename ${{ matrix.directory }})
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Install regctl
        uses: regclient/actions/regctl-installer@main

      - name: regctl login docker hub
        uses: regclient/actions/regctl-login@main
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: regctl login GitHub Container Registry
        uses: regclient/actions/regctl-login@main
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: sync images
        uses: it-bens/container-registry-sync-action@main
        with:
         sourceRepository: 'ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}'
         loginToSourceRepository: 'true'
         sourceRepositoryUsername: ${{ github.actor }}
         sourceRepositoryPassword: ${{ secrets.GITHUB_TOKEN }}
         targetRepository: '${{ github.repository_owner }}/${{ steps.image-name.outputs.image_name }}'
         loginToTargetRepository: 'true'
         targetRepositoryUsername: ${{ secrets.DOCKERHUB_USERNAME }}
         targetRepositoryPassword: ${{ secrets.DOCKERHUB_TOKEN }}