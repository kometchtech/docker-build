name: Build and Push Multi-Arch Docker Images

on:
  push:
    paths:
      - '**/Dockerfile'
      - '**/VERSION'
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.get-dirs.outputs.changed_dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべての履歴を取得

      - name: Get changed directories
        id: get-dirs
        run: |
          CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD | grep -E 'Dockerfile|VERSION' | xargs -I {} dirname {} | sort -u | uniq)
          if [[ -z "$CHANGED_DIRS" ]]; then
            CHANGED_DIRS="[]"
          else
            CHANGED_DIRS=$(echo $CHANGED_DIRS | jq -R -c 'split(" ")')
          fi
          echo "Changed directories: $CHANGED_DIRS"
          echo "changed_dirs=$(echo $CHANGED_DIRS)" >> $GITHUB_ENV
          echo "changed_dirs=$(echo $CHANGED_DIRS)" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_dirs != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}
        arch: 
          - linux/amd64 
          - linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.3.0
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read version from VERSION file
        id: set-version
        run: echo "VERSION=$(cat ${{ matrix.dir }}/VERSION | tr -d ' ')" >> $GITHUB_ENV

      - name: Prepare Arch Tag for Docker
        id: prepare-arch-tag
        run: |
          ARCH_TAG=$(echo ${{ matrix.arch }} | sed 's/\//-/g')
          echo "ARCH_TAG=$ARCH_TAG" >> $GITHUB_ENV

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.dir }}
          push: true
          platforms: ${{ matrix.arch }}
          build-args:
            VERSION=${{ env.VERSION }}
          no-cache: ${{ inputs.no-cache == true }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.dir }}:${{ env.VERSION }}-${{ env.ARCH_TAG }}

    outputs:
      version: ${{ env.VERSION }}
      archs: ${{ toJson(matrix.arch) }}  # <-- ARCHS を outputs に追加
      changed_dirs: ${{ matrix.dir }}

  manifest:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Load version and archs from previous step
        run: |
          echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV
          echo "ARCHS=${{ needs.build.outputs.archs }}" >> $GITHUB_ENV

      - name: Create and Push Docker Manifest
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ needs.build.outputs.changed_dirs }}"
          AMEND_ARGS=""
          for ARCH in $(echo $ARCHS | jq -r '.[]'); do
            ARCH_TAG=$(echo $ARCH | sed 's/\//-/g')  # <-- ここで変換
            AMEND_ARGS="$AMEND_ARGS --amend $IMAGE_NAME:${VERSION}-$ARCH_TAG"
          done
          docker manifest create $IMAGE_NAME:${VERSION} $AMEND_ARGS
          docker manifest push $IMAGE_NAME:${VERSION}

      - name: Create and Push Docker Manifest (Latest)
        if: github.ref == 'refs/heads/master'
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ needs.build.outputs.changed_dirs }}"
          AMEND_ARGS=""
          for ARCH in $(echo $ARCHS | jq -r '.[]'); do
            ARCH_TAG=$(echo $ARCH | sed 's/\//-/g')  # <-- ここで変換
            AMEND_ARGS="$AMEND_ARGS --amend $IMAGE_NAME:${VERSION}-$ARCH_TAG"
          done
          docker manifest create $IMAGE_NAME:latest $AMEND_ARGS
          docker manifest push $IMAGE_NAME:latest
