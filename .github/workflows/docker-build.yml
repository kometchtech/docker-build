name: Build and Push Multi-Arch Docker Images

on:
  push:
    paths:
      - '**/Dockerfile'
      - '**/VERSION'
      - '**/entrypoint.sh'
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.find-dirs.outputs.directories }}
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全コミットを取得

      - name: Determine previous commit
        id: previous-commit
        run: |
          if [ -z "${{ github.event.before }}" ] || ! git rev-parse ${{ github.event.before }} >/dev/null 2>&1; then
            BEFORE_COMMIT=$(git rev-parse HEAD^ || echo "")
          else
            BEFORE_COMMIT=${{ github.event.before }}
          fi
          echo "before_commit=$BEFORE_COMMIT" >> $GITHUB_ENV

      - name: Find modified directories
        id: find-dirs
        run: |
          if [ -n "${{ env.before_commit }}" ]; then
            CHANGED_DIRS=$(git diff --name-only ${{ env.before_commit }} HEAD | grep -E 'Dockerfile|VERSION|entrypoint.sh' | xargs -I {} dirname {} | sort -u | uniq)
            if [ -n "$CHANGED_DIRS" ]; then
              # 配列を作成
              DIRS_JSON="["
              for dir in $CHANGED_DIRS; do
                if [ "$DIRS_JSON" != "[" ]; then
                  DIRS_JSON="$DIRS_JSON,"
                fi
                DIRS_JSON="$DIRS_JSON\"$dir\""
              done
              DIRS_JSON="$DIRS_JSON]"
              echo "directories=$DIRS_JSON" >> $GITHUB_OUTPUT
              echo "Changed directories: $CHANGED_DIRS"
            else
              echo "No relevant changes found"
              echo "directories=[]" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous commit found, skipping build."
            echo "directories=[]" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: needs.prepare.outputs.directories != '[]'
    strategy:
      fail-fast: false
      matrix:
        arch:
          - os: ubuntu-latest
            platform: linux/amd64
            suffix: amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            suffix: arm64
        directory: ${{ fromJson(needs.prepare.outputs.directories) }}
    runs-on: ${{ matrix.arch.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: source

      - name: Get image name from directory
        id: image-name
        run: |
          IMAGE_NAME=$(basename ${{ matrix.directory }})
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set VERSION environment variable
        id: set-version
        run: |
          if [ -f "source/${{ matrix.directory }}/VERSION" ]; then
            RELEASE_VERSION=$(cat "source/${{ matrix.directory }}/VERSION" | tr -d ' \n\t\r')
            echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "Version set to: ${RELEASE_VERSION}"
          else
            echo "No VERSION file found, using latest"
            echo "release_version=latest" >> $GITHUB_OUTPUT
          fi

      # QEMU setup is only needed for AMD64 runners building ARM64 images
      - name: Set up QEMU
        if: matrix.arch.platform == 'linux/arm64' && runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3.3.0
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: source/${{ matrix.directory }}
          platforms: ${{ matrix.arch.platform }}
          push: true
          no-cache: ${{ inputs.no-cache == true }}
          build-args: |
            VERSION=${{ steps.set-version.outputs.release_version }}
          cache-from: type=gha,scope=${{ matrix.arch.suffix }}-${{ steps.image-name.outputs.image_name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch.suffix }}-${{ steps.image-name.outputs.image_name }}
          outputs: type=image,name=${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest}" > /tmp/digests/digest.txt

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ steps.image-name.outputs.image_name }}-${{ matrix.arch.suffix }}
          path: /tmp/digests/digest.txt
          retention-days: 1
          if-no-files-found: error

  merge:
    needs: [prepare, build]
    if: needs.prepare.outputs.directories != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.prepare.outputs.directories) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: source

      - name: Get image name from directory
        id: image-name
        run: |
          IMAGE_NAME=$(basename ${{ matrix.directory }})
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-${{ steps.image-name.outputs.image_name }}-*
          merge-multiple: true

      - name: Extract digests
        id: extract
        run: |
          # 各アーキテクチャのダイジェストファイルを検索
          AMD64_FILE=$(find /tmp/digests -name "digest-${{ steps.image-name.outputs.image_name }}-amd64" -type d | head -n 1)
          ARM64_FILE=$(find /tmp/digests -name "digest-${{ steps.image-name.outputs.image_name }}-arm64" -type d | head -n 1)
          
          if [ -z "$AMD64_FILE" ] || [ ! -f "$AMD64_FILE/digest.txt" ]; then
            echo "Error: AMD64 digest not found"
            exit 1
          fi
          
          if [ -z "$ARM64_FILE" ] || [ ! -f "$ARM64_FILE/digest.txt" ]; then
            echo "Error: ARM64 digest not found"
            exit 1
          fi
          
          AMD64_DIGEST=$(cat "$AMD64_FILE/digest.txt")
          ARM64_DIGEST=$(cat "$ARM64_FILE/digest.txt")
          
          echo "amd64=${AMD64_DIGEST}" >> $GITHUB_OUTPUT
          echo "arm64=${ARM64_DIGEST}" >> $GITHUB_OUTPUT
          
          echo "AMD64 digest: ${AMD64_DIGEST}"
          echo "ARM64 digest: ${ARM64_DIGEST}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set VERSION environment variable
        id: set-version
        run: |
          if [ -f "source/${{ matrix.directory }}/VERSION" ]; then
            RELEASE_VERSION=$(cat "source/${{ matrix.directory }}/VERSION" | tr -d ' \n\t\r')
            echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "Version set to: ${RELEASE_VERSION}"
          else
            echo "No VERSION file found, using latest"
            echo "release_version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create manifest list and push
        run: |
          # Create manifest with version tag
          echo "Creating manifest with version tag: ${{ steps.set-version.outputs.release_version }}"
          docker buildx imagetools create \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}:${{ steps.set-version.outputs.release_version }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}@${{ steps.extract.outputs.amd64 }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}@${{ steps.extract.outputs.arm64 }}
          
          # Also tag as latest
          echo "Creating manifest with latest tag"
          docker buildx imagetools create \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}:latest \
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}@${{ steps.extract.outputs.amd64 }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}@${{ steps.extract.outputs.arm64 }}
          
          echo "Created and pushed manifest list for ${{ secrets.DOCKER_USERNAME }}/${{ steps.image-name.outputs.image_name }}"
