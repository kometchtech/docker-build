name: Docker Multi-Architecture Build

on:
  workflow_dispatch:
    inputs:
      app_directory:
        description: 'Directory of the application to build'
        required: true
        type: string
      no-cache:
        description: 'Disable build cache'
        required: false
        type: boolean
        default: false
  push:
    paths:
      - '**/Dockerfile'
      - '**/VERSION'
      - '**/entrypoint.sh'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      app_directory: ${{ steps.set-app-dir.outputs.app_directory }}
      version: ${{ steps.get-version.outputs.version }}
      image_name: ${{ steps.set-image-name.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set application directory
        id: set-app-dir
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "app_directory=${{ github.event.inputs.app_directory }}" >> $GITHUB_OUTPUT
          else
            # Get changed files from the commit
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
            
            # Look for modified Dockerfile, VERSION or entrypoint.sh
            DOCKERFILE_CHANGE=$(echo "$CHANGED_FILES" | grep -E '([^/]+)/Dockerfile' || true)
            VERSION_CHANGE=$(echo "$CHANGED_FILES" | grep -E '([^/]+)/VERSION' || true)
            ENTRYPOINT_CHANGE=$(echo "$CHANGED_FILES" | grep -E '([^/]+)/entrypoint.sh' || true)
            
            if [[ ! -z "$DOCKERFILE_CHANGE" ]]; then
              APP_DIR=$(echo "$DOCKERFILE_CHANGE" | head -n 1 | cut -d'/' -f1)
              echo "Dockerfile changed in directory: $APP_DIR"
            elif [[ ! -z "$VERSION_CHANGE" ]]; then
              APP_DIR=$(echo "$VERSION_CHANGE" | head -n 1 | cut -d'/' -f1)
              echo "VERSION changed in directory: $APP_DIR"
            elif [[ ! -z "$ENTRYPOINT_CHANGE" ]]; then
              APP_DIR=$(echo "$ENTRYPOINT_CHANGE" | head -n 1 | cut -d'/' -f1)
              echo "entrypoint.sh changed in directory: $APP_DIR"
            else
              echo "No relevant changes detected in Dockerfile, VERSION, or entrypoint.sh files"
              exit 1
            fi
            
            echo "app_directory=${APP_DIR}" >> $GITHUB_OUTPUT
          fi

      - name: Get version from VERSION file
        id: get-version
        run: |
          APP_DIR="${{ steps.set-app-dir.outputs.app_directory }}"
          if [ -f "${APP_DIR}/VERSION" ]; then
            VERSION=$(cat "${APP_DIR}/VERSION" | tr -d '\n')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Error: VERSION file not found in ${APP_DIR}"
            exit 1
          fi

      - name: Set image name
        id: set-image-name
        run: |
          APP_DIR="${{ steps.set-app-dir.outputs.app_directory }}"
          echo "image_name=${APP_DIR}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            os: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          echo "suffix=${{ matrix.arch }}" >> $GITHUB_OUTPUT

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ needs.prepare.outputs.app_directory }}
          file: ./${{ needs.prepare.outputs.app_directory }}/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          no-cache: ${{ inputs.no-cache == true }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
          cache-from: type=gha,scope=platform-${{ steps.arch-suffix.outputs.suffix }}
          cache-to: type=gha,mode=max,scope=platform-${{ steps.arch-suffix.outputs.suffix }}
          outputs: type=image,name=kometchtech/${{ needs.prepare.outputs.image_name }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "${{ matrix.platform }},${{ steps.build.outputs.digest }}" >> /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}
          cat /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ needs.prepare.outputs.image_name }}-${{ steps.arch-suffix.outputs.suffix }}
          path: /tmp/digests/digest-${{ steps.arch-suffix.outputs.suffix }}
          retention-days: 1

  merge:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ needs.prepare.outputs.image_name }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        run: |
          APP_NAME="${{ needs.prepare.outputs.image_name }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Parse the digests collected from the previous step
          DIGESTS=""
          for FILE in /tmp/digests/digest-*; do
            while IFS= read -r line; do
              PLATFORM=$(echo $line | cut -d ',' -f 1)
              DIGEST=$(echo $line | cut -d ',' -f 2)
              DIGESTS="${DIGESTS} ${DIGEST}"
            done < $FILE
          done
          
          # Create versioned tag
          docker buildx imagetools create -t kometchtech/${APP_NAME}:${VERSION} ${DIGESTS}
          
          # Create latest tag
          docker buildx imagetools create -t kometchtech/${APP_NAME}:latest ${DIGESTS}
