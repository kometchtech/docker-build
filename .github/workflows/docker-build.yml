name: Build and Push Multi-Arch Docker Images

on:
  push:
    paths:
      - '**/Dockerfile'
      - '**/VERSION'
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全コミットを取得

      - name: Ensure latest commit is checked out
        run: git checkout ${{ github.sha }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.3.0
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5
          platform: ${{ inputs.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # メモリ制限の設定を追加
      - name: Configure build memory limits
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "BUILDKIT_STEP_LOG_MAX_SIZE=10485760" >> $GITHUB_ENV
          echo "BUILDKIT_STEP_LOG_MAX_SPEED=10485760" >> $GITHUB_ENV

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine previous commit
        id: previous-commit
        run: |
          if [ -z "${{ github.event.before }}" ] || ! git rev-parse ${{ github.event.before }} >/dev/null 2>&1; then
            BEFORE_COMMIT=$(git rev-parse HEAD^ || echo "")
          else
            BEFORE_COMMIT=${{ github.event.before }}
          fi
          echo "before_commit=$BEFORE_COMMIT" >> $GITHUB_ENV

      - name: Find modified directories
        id: find-dirs
        run: |
          if [ -n "$before_commit" ]; then
            CHANGED_DIRS=$(git diff --name-only $before_commit HEAD | grep -E 'Dockerfile|VERSION' | xargs -I {} dirname {} | sort -u | uniq)
            echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
            # 変更されたディレクトリをファイルに保存
            echo "$CHANGED_DIRS" > changed_dirs.txt
          else
            echo "No previous commit found, skipping build."
            echo "changed_dirs=" >> $GITHUB_ENV
          fi

      # 変更されたディレクトリ情報をアーティファクトとして保存
      - name: Upload changed directories
        uses: actions/upload-artifact@v4
        with:
          name: changed-directories-${{ env.PLATFORM_PAIR }}
          path: changed_dirs.txt
          retention-days: 1

      - name: Set VERSION environment variable
        id: set-version
        run: |
          for dir in ${{ env.changed_dirs }}; do
            if [ -f "$dir/VERSION" ]; then
              RELEASE_VERSION=$(cat $dir/VERSION | tr -d ' ')  # VERSIONファイルからバージョンを取得
              echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV  # 環境変数にセット
              echo "Version set to: $RELEASE_VERSION"
            else
              echo "No VERSION file found in $dir, skipping..."
            fi
          done

      - name: Build and push images for ${{ matrix.platform }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.changed_dirs }}
          platforms: ${{ matrix.platform }}
          build-args: |
            VERSION=${{ env.RELEASE_VERSION }}
          push: true
          no-cache: ${{ inputs.no-cache == true }}
          provenance: false
          outputs: |
            type=image,name=${{ secrets.DOCKER_USERNAME }}/${{ env.changed_dirs }},push-by-digest=true
          cache-from: type=gha 
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: 
      - build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 変更されたディレクトリ情報を取得
      - name: Download changed directories
        uses: actions/download-artifact@v4
        with:
          pattern: changed-directories-*
          merge-multiple: true
          path: ./changed-dirs

      - name: Set changed directories
        id: set-dirs
        run: |
          # 最初のファイル内容を使用
          CHANGED_DIRS=$(cat ./changed-dirs/changed_dirs.txt)
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
          echo "Using directories: $CHANGED_DIRS"

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set VERSION environment variable
        id: set-version
        run: |
          for dir in ${{ env.changed_dirs }}; do
            if [ -f "$dir/VERSION" ]; then
              RELEASE_VERSION=$(cat "$dir/VERSION" | tr -d ' \t\n\r')
              echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
              echo "Version found: $RELEASE_VERSION in $dir"
              break
            fi
          done

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

            #      - name: Set up Docker Buildx
            #        uses: docker/setup-buildx-action@v3
            #
            #      - name: Create manifest list and push
            #        working-directory: ${{ runner.temp }}/digests
            #        run: |
            #          for dir in ${{ env.changed_dirs }}; do
            #            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${dir#./}"
            #            
            #            # プラットフォーム固有のダイジェストを収集
            #            digests=()
            #            for digest in *; do
            #              digests+=("$IMAGE_NAME@sha256:$digest")
            #            done
            #
            #            # バージョンタグでマニフェストを作成・プッシュ
            #            docker buildx imagetools create -t $IMAGE_NAME:${{ env.RELEASE_VERSION }} ${digests[@]}
            #
            #            # mainブランチの場合、latestタグも作成
            #            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            #              docker buildx imagetools create -t $IMAGE_NAME:latest ${digests[@]}
            #            fi
            #          done

  merge-docker-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
          inputs: ${{ secrets.DOCKER_USERNAME }}/${{ env.changed_dirs }}:latest
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.changed_dirs }}:latest-amd64,${{ secrets.DOCKER_USERNAME }}/${{ env.changed_dirs }}:latest-arm64           
          push: true
